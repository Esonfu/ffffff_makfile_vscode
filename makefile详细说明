```makefile ##########################################################################################################################

File automatically-generated by tool: [projectgenerator] version: [4.3.0-B58] date: [Thu Oct 31 13:39:50 CST 2024]
##########################################################################################################################

------------------------------------------------
Generic Makefile (based on gcc)
ChangeLog :
2017-02-10 - Several enhancements + project update mode
2015-07-22 - first version
------------------------------------------------
######################################

target
###################################### TARGET = ffffff_makfile_vscode # 定义生成的目标文件名

######################################

building variables
######################################

debug build?
DEBUG = 1 # 是否为调试版本

optimization
OPT = -Og # 优化选项

#######################################

paths
#######################################

Build path
BUILD_DIR = build # 构建目录

######################################

source
######################################

C sources
C_SOURCES = \ # C 源文件列表 Core/Src/main.c
Core/Src/stm32f4xx_it.c
Core/Src/stm32f4xx_hal_msp.c
Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_tim.c
Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_tim_ex.c
Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c
Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc_ex.c
Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash.c
Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c
Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ramfunc.c
Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_gpio.c
Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_dma_ex.c
Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_dma.c
Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c
Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr_ex.c
Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_cortex.c
Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c
Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c
Core/Src/system_stm32f4xx.c
Core/Src/sysmem.c
Core/Src/syscalls.c
Core/Src/gpio.c
eapp/hello.c

ASM sources
ASM_SOURCES = \ # 汇编源文件列表 startup_stm32f407xx.s

ASM sources
ASMM_SOURCES = # 其他汇编源文件列表

#######################################

binaries
####################################### PREFIX = arm-none-eabi- # 工具链前缀

The gcc compiler bin path can be either defined in make command via GCC_PATH variable (> make GCC_PATH=xxx)
either it can be added to the PATH environment variable.
ifdef GCC_PATH CC = $(GCC_PATH)/$(PREFIX)gcc # C 编译器 AS = $(GCC_PATH)/$(PREFIX)gcc -x assembler-with-cpp # 汇编器 CP = $(GCC_PATH)/$(PREFIX)objcopy # 对象文件复制工具 SZ = $(GCC_PATH)/$(PREFIX)size # 显示对象文件大小 else CC = $(PREFIX)gcc AS = $(PREFIX)gcc -x assembler-with-cpp CP = $(PREFIX)objcopy SZ = $(PREFIX)size endif HEX = $(CP) -O ihex # 生成 HEX 文件 BIN = $(CP) -O binary -S # 生成二进制文件

#######################################

CFLAGS
#######################################

cpu
CPU = -mcpu=cortex-m4 # 指定 CPU 类型

fpu
FPU = -mfpu=fpv4-sp-d16 # 指定 FPU 类型

float-abi
FLOAT-ABI = -mfloat-abi=hard # 指定浮点 ABI

mcu
MCU = $(CPU) -mthumb $(FPU) $(FLOAT-ABI) # MCU 编译选项

macros for gcc
AS defines
AS_DEFS = # 汇编定义

C defines
C_DEFS = \ # C 语言定义 -DUSE_HAL_DRIVER
-DSTM32F407xx

AS includes
AS_INCLUDES = # 汇编包含路径

C includes
C_INCLUDES = \ # C 语言包含路径 -ICore/Inc
-IDrivers/STM32F4xx_HAL_Driver/Inc
-IDrivers/STM32F4xx_HAL_Driver/Inc/Legacy
-IDrivers/CMSIS/Device/ST/STM32F4xx/Include
-IDrivers/CMSIS/Include
-I eapp

compile gcc flags
ASFLAGS = $(MCU) $(AS_DEFS) $(AS_INCLUDES) $(OPT) -Wall -fdata-sections -ffunction-sections # 汇编编译选项

CFLAGS += $(MCU) $(C_DEFS) $(C_INCLUDES) $(OPT) -Wall -fdata-sections -ffunction-sections # C 编译选项

ifeq ($(DEBUG), 1) CFLAGS += -g -gdwarf-2 # 调试选项 endif

Generate dependency information
CFLAGS += -MMD -MP -MF"$(@:%.o=%.d)" # 生成依赖信息

#######################################

LDFLAGS
#######################################

link script
LDSCRIPT = STM32F407VGTx_FLASH.ld # 链接脚本

libraries
LIBS = -lc -lm -lnosys # 链接库 LIBDIR = LDFLAGS = $(MCU) -specs=nano.specs -T$(LDSCRIPT) $(LIBDIR) $(LIBS) -Wl,-Map=$(BUILD_DIR)/$(TARGET).map,--cref -Wl,--gc-sections # 链接选项

default action: build all
all: $(BUILD_DIR)/$(TARGET).elf $(BUILD_DIR)/$(TARGET).hex $(BUILD_DIR)/$(TARGET).bin # 默认目标

#######################################

build the application
#######################################

list of objects
OBJECTS = $(addprefix $(BUILD_DIR)/,$(notdir $(C_SOURCES:.c=.o))) # 对象文件列表 vpath %.c $(sort $(dir $(C_SOURCES))) # C 源文件路径

list of ASM program objects
OBJECTS += $(addprefix $(BUILD_DIR)/,$(notdir $(ASM_SOURCES:.s=.o))) # 汇编对象文件列表 vpath %.s $(sort $(dir $(ASM_SOURCES))) # 汇编源文件路径 OBJECTS += $(addprefix $(BUILD_DIR)/,$(notdir $(ASMM_SOURCES:.S=.o))) # 其他汇编对象文件列表 vpath %.S $(sort $(dir $(ASMM_SOURCES))) # 其他汇编源文件路径

$(BUILD_DIR)/%.o: %.c Makefile | $(BUILD_DIR) $(CC) -c $(CFLAGS) -Wa,-a,-ad,-alms=$(BUILD_DIR)/$(notdir $(<:.c=.lst)) $< -o $@ # 编译 C 文件

$(BUILD_DIR)/%.o: %.s Makefile | $(BUILD_DIR) $(AS) -c $(CFLAGS) $< -o $@ # 编译汇编文件 $(BUILD_DIR)/%.o: %.S Makefile | $(BUILD_DIR) $(AS) -c $(CFLAGS) $< -o $@ # 编译其他汇编文件

$(BUILD_DIR)/$(TARGET).elf: $(OBJECTS) Makefile $(CC) $(OBJECTS) $(LDFLAGS) -o $@ # 链接生成 ELF 文件 $(SZ) $@ # 显示 ELF 文件大小

$(BUILD_DIR)/%.hex: $(BUILD_DIR)/%.elf | $(BUILD_DIR) $(HEX) $< $@ # 生成 HEX 文件

$(BUILD_DIR)/%.bin: $(BUILD_DIR)/%.elf | $(BUILD_DIR) $(BIN) $< $@ # 生成二进制文件

$(BUILD_DIR): mkdir $@ # 创建构建目录

#######################################
clean up
####################################### 
clean:
##	lunx os
##	-rm -fR $(BUILD_DIR)

##	windows os
	@if exist $(BUILD_DIR) (rmdir /s /q $(BUILD_DIR))
  
#######################################
# dependencies
#######################################
-include $(wildcard $(BUILD_DIR)/*.d)

# *** EOF ***
